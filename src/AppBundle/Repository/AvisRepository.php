<?php

namespace AppBundle\Repository;

use Doctrine\ORM\NonUniqueResultException;
use Doctrine\ORM\NoResultException;

/**
 * AvisRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class AvisRepository extends \Doctrine\ORM\EntityRepository
{
    public function findOneByUtilisateurAndOeuvre($utilisateur, $oeuvre)
    {
        return $this->createQueryBuilder()
            ->select('avis')
            ->from('Avis', 'avis')
            ->where('avis.utilisateur = ?utilisateur')
            ->andWhere('avis.oeuvre = ?oeuvre')
            ->setParameter('utilisateur', $utilisateur)
            ->setParameter('oeuvre', $oeuvre)
            ->getFirstResult();
    }
    public function findNbAvisPositifCreatedBetweenTwoDates(\DateTime $beginDate, \DateTime $endDate, $oeuvreId)
    {
        try {
            return $this->createQueryBuilder('avis')
                ->select('COUNT(avis)')
                ->from('Avis', 'avis')
                ->where("avis.date > ?1")
                ->andWhere("avis.date < ?2")
                ->andWhere("avis.oeuvre = ?oeuvre")
                ->andWhere("avis.type = 1")
                ->setParameter(1, $beginDate)
                ->setParameter(2, $endDate)
                ->setParameter('oeuvre', $oeuvreId)
                ->getQuery()
                ->getSingleScalarResult();
        } catch (NoResultException $e) {
        } catch (NonUniqueResultException $e) {
        }
    }

    public function findNbAvisNegatifCreatedBetweenTwoDates(\DateTime $beginDate, \DateTime $endDate, $oeuvreId)
    {
        try {
            return $this->createQueryBuilder('avis')
                ->select('COUNT(avis)')
                ->from('Avis', 'avis')
                ->where("avis.date > ?1")
                ->andWhere("avis.date < ?2")
                ->andWhere("avis.oeuvre = ?oeuvre")
                ->andWhere("avis.type = 0")
                ->setParameter(1, $beginDate)
                ->setParameter(2, $endDate)
                ->setParameter('oeuvre', $oeuvreId)
                ->getQuery()
                ->getSingleScalarResult();
        } catch (NoResultException $e) {
        } catch (NonUniqueResultException $e) {
        }
    }
}
